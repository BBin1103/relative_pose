#include <opencv2/opencv.hpp>
#include "relative_pose/relative_pose.hpp"
#include "precomp.hpp"
#include "sturm.h"

int const NVIEWS = 2;
int const SAMPLE = 4;

struct Camera
{
    double Rt[2][12];
};

struct auxArrays
{
    double B[16][36];
    double D[4][4][7];
    double p[21];

    void matrix16x36(const double [NVIEWS][SAMPLE], const double [NVIEWS][SAMPLE], const double [NVIEWS][SAMPLE], 
        const double &, const double &);
    void det4x4();
    void poly20();
};

// construct 16 x 36 matrix B
void auxArrays::matrix16x36 (const double x[NVIEWS][SAMPLE], const double y[NVIEWS][SAMPLE], const double z[NVIEWS][SAMPLE], 
    const double &ss, const double &s)
{
    const int ii[4] = {1, 2, 3, 0}, jj[4] = {2, 3, 0, 1};
    const double t = ss - 0.5;

    double A[4][35];

    for (int k = 0; k < 4; ++k)
    {
        const int i = ii[k], j = jj[k];

        const double u1 = -y[0][i]*z[0][k] + y[0][k]*z[0][i];
        const double u2 = x[0][i]*z[0][k] - x[0][k]*z[0][i];
        const double u3 = -x[0][i]*y[0][k] + x[0][k]*y[0][i];
        const double u4 = -y[1][i]*z[1][k] + y[1][k]*z[1][i];
        const double u5 = x[1][i]*z[1][k] - x[1][k]*z[1][i];
        const double u6 = -x[1][i]*y[1][k] + x[1][k]*y[1][i];
        const double u7 = -y[0][j]*z[0][k] + y[0][k]*z[0][j];
        const double u8 = x[0][j]*z[0][k] - x[0][k]*z[0][j];
        const double u9 = -x[0][j]*y[0][k] + x[0][k]*y[0][j];
        const double u10 = -y[1][j]*z[1][k] + y[1][k]*z[1][j];
        const double u11 = x[1][j]*z[1][k] - x[1][k]*z[1][j];
        const double u12 = -x[1][j]*y[1][k] + x[1][k]*y[1][j];

        const double S1 = x[1][i]*u1;
        const double S2 = u4*x[0][i];
        const double S3 = x[1][j]*u7;
        const double S4 = u10*x[0][j];
        const double S5 = y[1][i]*u1 + x[1][i]*u2;
        const double S6 = u4*y[0][i] + u5*x[0][i];
        const double S7 = y[1][j]*u7 + x[1][j]*u8;
        const double S8 = u10*y[0][j] + u11*x[0][j];
        const double S9 = y[1][i]*u2;
        const double S10 = u5*y[0][i];
        const double S11 = y[1][j]*u8;
        const double S12 = u11*y[0][j];
        const double S13 = z[1][i]*u1 + x[1][i]*u3;
        const double S14 = u4*z[0][i] + u6*x[0][i];
        const double S15 = z[1][j]*u7 + x[1][j]*u9;
        const double S16 = u10*z[0][j] + u12*x[0][j];
        const double S17 = u2*z[1][i] + y[1][i]*u3;
        const double S18 = u5*z[0][i] + u6*y[0][i];
        const double S19 = z[1][j]*u8 + y[1][j]*u9;
        const double S20 = u11*z[0][j] + u12*y[0][j];
        const double S21 = z[1][i]*u3;
        const double S22 = u6*z[0][i];
        const double S23 = z[1][j]*u9;
        const double S24 = u12*z[0][j];
        const double S25 = -s*(u2*z[1][i] - y[1][i]*u3);
        const double S26 = s*(u5*z[0][i] - u6*y[0][i]);
        const double S27 = -s*(z[1][j]*u8 - y[1][j]*u9);
        const double S28 = s*(u11*z[0][j] - u12*y[0][j]);
        const double S29 = s*(u1*z[1][i] - u3*x[1][i]);
        const double S30 = -s*(u4*z[0][i] - u6*x[0][i]);
        const double S31 = s*(u7*z[1][j] - u9*x[1][j]);
        const double S32 = -s*(u10*z[0][j] - u12*x[0][j]);
        const double S33 = -s*(u1*y[1][i] - u2*x[1][i]);
        const double S34 = s*(u4*y[0][i] - u5*x[0][i]);
        const double S35 = -s*(u7*y[1][j] - u8*x[1][j]);
        const double S36 = s*(u10*y[0][j] - u11*x[0][j]);
        const double S37 = t*(x[1][i]*u1 + y[1][i]*u2 + z[1][i]*u3);
        const double S38 = t*(u4*x[0][i] + u5*y[0][i] + u6*z[0][i]);
        const double S39 = t*(x[1][j]*u7 + y[1][j]*u8 + z[1][j]*u9);
        const double S40 = t*(u10*x[0][j] + u11*y[0][j] + u12*z[0][j]);

        A[k][0] = S1*S4 - S2*S3;
        A[k][1] = S1*S8 - S2*S7 - S3*S6 + S4*S5;
        A[k][2] = S1*S12 - S10*S3 - S11*S2 + S4*S9 + S5*S8 - S6*S7;
        A[k][3] = -S10*S7 - S11*S6 + S12*S5 + S8*S9;
        A[k][4] = -S10*S11 + S12*S9;
        A[k][5] = S1*S16 + S13*S4 - S14*S3 - S15*S2;
        A[k][6] = S1*S20 + S13*S8 - S14*S7 - S15*S6 + S16*S5 + S17*S4 - S18*S3 - S19*S2;
        A[k][7] = -S10*S15 - S11*S14 + S12*S13 + S16*S9 + S17*S8 - S18*S7 - S19*S6 + S20*S5;
        A[k][8] = -S10*S19 - S11*S18 + S12*S17 + S20*S9;
        A[k][9] = S1*S24 + S13*S16 - S14*S15 - S2*S23 + S21*S4 - S22*S3;
        A[k][10] = S13*S20 - S14*S19 - S15*S18 + S16*S17 + S21*S8 - S22*S7 - S23*S6 + S24*S5;
        A[k][11] = -S10*S23 - S11*S22 + S12*S21 + S17*S20 - S18*S19 + S24*S9;
        A[k][12] = S13*S24 - S14*S23 - S15*S22 + S16*S21;
        A[k][13] = S17*S24 - S18*S23 - S19*S22 + S20*S21;
        A[k][14] = S21*S24 - S22*S23;
        A[k][15] = S1*S28 - S2*S27 + S25*S4 - S26*S3;
        A[k][16] = S1*S32 - S2*S31 + S25*S8 - S26*S7 - S27*S6 + S28*S5 + S29*S4 - S3*S30;
        A[k][17] = -S10*S27 - S11*S26 + S12*S25 + S28*S9 + S29*S8 - S30*S7 - S31*S6 + S32*S5;
        A[k][18] = -S10*S31 - S11*S30 + S12*S29 + S32*S9;
        A[k][19] = S1*S36 + S13*S28 - S14*S27 - S15*S26 + S16*S25 - S2*S35 - S3*S34 + S33*S4;
        A[k][20] = S13*S32 - S14*S31 - S15*S30 + S16*S29 + S17*S28 - S18*S27 - S19*S26 + S20*S25 + S33*S8 - S34*S7 - S35*S6 + S36*S5;
        A[k][21] = -S10*S35 - S11*S34 + S12*S33 + S17*S32 - S18*S31 - S19*S30 + S20*S29 + S36*S9;
        A[k][22] = S13*S36 - S14*S35 - S15*S34 + S16*S33 + S21*S28 - S22*S27 - S23*S26 + S24*S25;
        A[k][23] = S17*S36 - S18*S35 - S19*S34 + S20*S33 + S21*S32 - S22*S31 - S23*S30 + S24*S29;
        A[k][24] = S21*S36 - S22*S35 - S23*S34 + S24*S33;
        A[k][25] = S1*S40 - S2*S39 + S25*S28 - S26*S27 - S3*S38 + S37*S4;
        A[k][26] = S25*S32 - S26*S31 - S27*S30 + S28*S29 + S37*S8 - S38*S7 - S39*S6 + S40*S5;
        A[k][27] = -S10*S39 - S11*S38 + S12*S37 + S29*S32 - S30*S31 + S40*S9;
        A[k][28] = S13*S40 - S14*S39 - S15*S38 + S16*S37 + S25*S36 - S26*S35 - S27*S34 + S28*S33;
        A[k][29] = S17*S40 - S18*S39 - S19*S38 + S20*S37 + S29*S36 - S30*S35 - S31*S34 + S32*S33;
        A[k][30] = S21*S40 - S22*S39 - S23*S38 + S24*S37 + S33*S36 - S34*S35;
        A[k][31] = S25*S40 - S26*S39 - S27*S38 + S28*S37;
        A[k][32] = S29*S40 - S30*S39 - S31*S38 + S32*S37;
        A[k][33] = S33*S40 - S34*S39 - S35*S38 + S36*S37;
        A[k][34] = S37*S40 - S38*S39;
    }

    const double r = ss - 1;
    const double rr = pow(r, 2);

    B[0][0] = A[0][4] + A[0][0] - A[0][2];
    B[0][1] = A[0][1] - A[0][3];
    B[0][2] = A[0][8] - A[0][6];
    B[0][3] = A[0][5] - A[0][7];
    B[0][4] = A[0][11] + 2*A[0][0] - A[0][2] - A[0][9];
    B[0][5] = 2*A[0][1] - A[0][3] - A[0][10];
    B[0][6] = A[0][18] - A[0][16];
    B[0][7] = A[0][15] - A[0][17];
    B[0][8] = A[0][21] - A[0][19];
    B[0][9] = (2*A[0][0] - A[0][2])*r - A[0][25] + A[0][27];
    B[0][10] = -A[0][20];
    B[0][11] = (2*A[0][1] - A[0][3])*r - A[0][26];
    B[0][12] = 2*A[0][5] - A[0][7] - A[0][12];
    B[0][13] = 2*A[0][15] - A[0][17] - A[0][22];
    B[0][14] = (2*A[0][5] - A[0][7])*r - A[0][28];
    B[0][15] = (2*A[0][15] - A[0][17])*r - A[0][31];
    B[0][16] = A[0][13] - A[0][6];
    B[0][17] = A[0][23] - A[0][16];
    B[0][18] = -r*A[0][6] + A[0][29];
    B[0][19] = -r*A[0][16] + A[0][32];
    B[0][20] = A[0][14] + A[0][0] - A[0][9];
    B[0][21] = A[0][24] - A[0][19];
    B[0][22] = (2*A[0][0] - A[0][9])*r - A[0][25] + A[0][30];
    B[0][23] = -r*A[0][19] + A[0][33];
    B[0][24] = -r*A[0][25] + rr*A[0][0] + A[0][34];
    B[0][25] = A[0][1] - A[0][10];
    B[0][26] = -A[0][20];
    B[0][27] = (2*A[0][1] - A[0][10])*r - A[0][26];
    B[0][28] = -A[0][20]*r;
    B[0][29] = -r*A[0][26] + rr*A[0][1];
    B[0][30] = A[0][5] - A[0][12];
    B[0][31] = A[0][15] - A[0][22];
    B[0][32] = (2*A[0][5] - A[0][12])*r - A[0][28];
    B[0][33] = (2*A[0][15] - A[0][22])*r - A[0][31];
    B[0][34] = -r*A[0][28] + rr*A[0][5];
    B[0][35] = -r*A[0][31] + rr*A[0][15];
    B[1][0] = A[1][4] + A[1][0] - A[1][2];
    B[1][1] = A[1][1] - A[1][3];
    B[1][2] = A[1][8] - A[1][6];
    B[1][3] = A[1][5] - A[1][7];
    B[1][4] = A[1][11] + 2*A[1][0] - A[1][2] - A[1][9];
    B[1][5] = 2*A[1][1] - A[1][3] - A[1][10];
    B[1][6] = A[1][18] - A[1][16];
    B[1][7] = A[1][15] - A[1][17];
    B[1][8] = A[1][21] - A[1][19];
    B[1][9] = (2*A[1][0] - A[1][2])*r - A[1][25] + A[1][27];
    B[1][10] = -A[1][20];
    B[1][11] = (2*A[1][1] - A[1][3])*r - A[1][26];
    B[1][12] = 2*A[1][5] - A[1][7] - A[1][12];
    B[1][13] = 2*A[1][15] - A[1][17] - A[1][22];
    B[1][14] = (2*A[1][5] - A[1][7])*r - A[1][28];
    B[1][15] = (2*A[1][15] - A[1][17])*r - A[1][31];
    B[1][16] = A[1][13] - A[1][6];
    B[1][17] = A[1][23] - A[1][16];
    B[1][18] = -r*A[1][6] + A[1][29];
    B[1][19] = -r*A[1][16] + A[1][32];
    B[1][20] = A[1][14] + A[1][0] - A[1][9];
    B[1][21] = A[1][24] - A[1][19];
    B[1][22] = (2*A[1][0] - A[1][9])*r - A[1][25] + A[1][30];
    B[1][23] = -r*A[1][19] + A[1][33];
    B[1][24] = -r*A[1][25] + rr*A[1][0] + A[1][34];
    B[1][25] = A[1][1] - A[1][10];
    B[1][26] = -A[1][20];
    B[1][27] = (2*A[1][1] - A[1][10])*r - A[1][26];
    B[1][28] = -A[1][20]*r;
    B[1][29] = -r*A[1][26] + rr*A[1][1];
    B[1][30] = A[1][5] - A[1][12];
    B[1][31] = A[1][15] - A[1][22];
    B[1][32] = (2*A[1][5] - A[1][12])*r - A[1][28];
    B[1][33] = (2*A[1][15] - A[1][22])*r - A[1][31];
    B[1][34] = -r*A[1][28] + rr*A[1][5];
    B[1][35] = -r*A[1][31] + rr*A[1][15];
    B[2][0] = A[2][4] + A[2][0] - A[2][2];
    B[2][1] = A[2][1] - A[2][3];
    B[2][2] = A[2][8] - A[2][6];
    B[2][3] = A[2][5] - A[2][7];
    B[2][4] = A[2][11] + 2*A[2][0] - A[2][2] - A[2][9];
    B[2][5] = 2*A[2][1] - A[2][3] - A[2][10];
    B[2][6] = A[2][18] - A[2][16];
    B[2][7] = A[2][15] - A[2][17];
    B[2][8] = A[2][21] - A[2][19];
    B[2][9] = (2*A[2][0] - A[2][2])*r - A[2][25] + A[2][27];
    B[2][10] = -A[2][20];
    B[2][11] = (2*A[2][1] - A[2][3])*r - A[2][26];
    B[2][12] = 2*A[2][5] - A[2][7] - A[2][12];
    B[2][13] = 2*A[2][15] - A[2][17] - A[2][22];
    B[2][14] = (2*A[2][5] - A[2][7])*r - A[2][28];
    B[2][15] = (2*A[2][15] - A[2][17])*r - A[2][31];
    B[2][16] = A[2][13] - A[2][6];
    B[2][17] = A[2][23] - A[2][16];
    B[2][18] = -r*A[2][6] + A[2][29];
    B[2][19] = -r*A[2][16] + A[2][32];
    B[2][20] = A[2][14] + A[2][0] - A[2][9];
    B[2][21] = A[2][24] - A[2][19];
    B[2][22] = (2*A[2][0] - A[2][9])*r - A[2][25] + A[2][30];
    B[2][23] = -r*A[2][19] + A[2][33];
    B[2][24] = -r*A[2][25] + rr*A[2][0] + A[2][34];
    B[2][25] = A[2][1] - A[2][10];
    B[2][26] = -A[2][20];
    B[2][27] = (2*A[2][1] - A[2][10])*r - A[2][26];
    B[2][28] = -A[2][20]*r;
    B[2][29] = -r*A[2][26] + rr*A[2][1];
    B[2][30] = A[2][5] - A[2][12];
    B[2][31] = A[2][15] - A[2][22];
    B[2][32] = (2*A[2][5] - A[2][12])*r - A[2][28];
    B[2][33] = (2*A[2][15] - A[2][22])*r - A[2][31];
    B[2][34] = -r*A[2][28] + rr*A[2][5];
    B[2][35] = -r*A[2][31] + rr*A[2][15];
    B[3][0] = A[3][4] + A[3][0] - A[3][2];
    B[3][1] = A[3][1] - A[3][3];
    B[3][2] = A[3][8] - A[3][6];
    B[3][3] = A[3][5] - A[3][7];
    B[3][4] = A[3][11] + 2*A[3][0] - A[3][2] - A[3][9];
    B[3][5] = 2*A[3][1] - A[3][3] - A[3][10];
    B[3][6] = A[3][18] - A[3][16];
    B[3][7] = A[3][15] - A[3][17];
    B[3][8] = A[3][21] - A[3][19];
    B[3][9] = (2*A[3][0] - A[3][2])*r - A[3][25] + A[3][27];
    B[3][10] = -A[3][20];
    B[3][11] = (2*A[3][1] - A[3][3])*r - A[3][26];
    B[3][12] = 2*A[3][5] - A[3][7] - A[3][12];
    B[3][13] = 2*A[3][15] - A[3][17] - A[3][22];
    B[3][14] = (2*A[3][5] - A[3][7])*r - A[3][28];
    B[3][15] = (2*A[3][15] - A[3][17])*r - A[3][31];
    B[3][16] = A[3][13] - A[3][6];
    B[3][17] = A[3][23] - A[3][16];
    B[3][18] = -r*A[3][6] + A[3][29];
    B[3][19] = -r*A[3][16] + A[3][32];
    B[3][20] = A[3][14] + A[3][0] - A[3][9];
    B[3][21] = A[3][24] - A[3][19];
    B[3][22] = (2*A[3][0] - A[3][9])*r - A[3][25] + A[3][30];
    B[3][23] = -r*A[3][19] + A[3][33];
    B[3][24] = -r*A[3][25] + rr*A[3][0] + A[3][34];
    B[3][25] = A[3][1] - A[3][10];
    B[3][26] = -A[3][20];
    B[3][27] = (2*A[3][1] - A[3][10])*r - A[3][26];
    B[3][28] = -A[3][20]*r;
    B[3][29] = -r*A[3][26] + rr*A[3][1];
    B[3][30] = A[3][5] - A[3][12];
    B[3][31] = A[3][15] - A[3][22];
    B[3][32] = (2*A[3][5] - A[3][12])*r - A[3][28];
    B[3][33] = (2*A[3][15] - A[3][22])*r - A[3][31];
    B[3][34] = -r*A[3][28] + rr*A[3][5];
    B[3][35] = -r*A[3][31] + rr*A[3][15];
    B[4][0] = -A[0][1] + A[0][3];
    B[4][1] = A[0][4] + A[0][0] - A[0][2];
    B[4][2] = -A[0][5] + A[0][7];
    B[4][3] = A[0][8] - A[0][6];
    B[4][4] = -A[0][1] + A[0][10];
    B[4][5] = A[0][11] + 2*A[0][0] - A[0][2] - A[0][9];
    B[4][6] = -A[0][15] + A[0][17];
    B[4][7] = A[0][18] - A[0][16];
    B[4][8] = A[0][20];
    B[4][9] = -A[0][1]*r + A[0][26];
    B[4][10] = A[0][21] - A[0][19];
    B[4][11] = (2*A[0][0] - A[0][2])*r - A[0][25] + A[0][27];
    B[4][12] = A[0][13] - A[0][6];
    B[4][13] = A[0][23] - A[0][16];
    B[4][14] = -r*A[0][6] + A[0][29];
    B[4][15] = -r*A[0][16] + A[0][32];
    B[4][16] = -A[0][5] + A[0][12];
    B[4][17] = -A[0][15] + A[0][22];
    B[4][18] = -A[0][5]*r + A[0][28];
    B[4][19] = -A[0][15]*r + A[0][31];
    B[4][20] = 0;
    B[4][21] = 0;
    B[4][22] = 0;
    B[4][23] = 0;
    B[4][24] = 0;
    B[4][25] = A[0][14] + A[0][0] - A[0][9];
    B[4][26] = A[0][24] - A[0][19];
    B[4][27] = (2*A[0][0] - A[0][9])*r - A[0][25] + A[0][30];
    B[4][28] = -r*A[0][19] + A[0][33];
    B[4][29] = -r*A[0][25] + rr*A[0][0] + A[0][34];
    B[4][30] = 0;
    B[4][31] = 0;
    B[4][32] = 0;
    B[4][33] = 0;
    B[4][34] = 0;
    B[4][35] = 0;
    B[5][0] = -A[1][1] + A[1][3];
    B[5][1] = A[1][4] + A[1][0] - A[1][2];
    B[5][2] = -A[1][5] + A[1][7];
    B[5][3] = A[1][8] - A[1][6];
    B[5][4] = -A[1][1] + A[1][10];
    B[5][5] = A[1][11] + 2*A[1][0] - A[1][2] - A[1][9];
    B[5][6] = -A[1][15] + A[1][17];
    B[5][7] = A[1][18] - A[1][16];
    B[5][8] = A[1][20];
    B[5][9] = -A[1][1]*r + A[1][26];
    B[5][10] = A[1][21] - A[1][19];
    B[5][11] = (2*A[1][0] - A[1][2])*r - A[1][25] + A[1][27];
    B[5][12] = A[1][13] - A[1][6];
    B[5][13] = A[1][23] - A[1][16];
    B[5][14] = -r*A[1][6] + A[1][29];
    B[5][15] = -r*A[1][16] + A[1][32];
    B[5][16] = -A[1][5] + A[1][12];
    B[5][17] = -A[1][15] + A[1][22];
    B[5][18] = -A[1][5]*r + A[1][28];
    B[5][19] = -A[1][15]*r + A[1][31];
    B[5][20] = 0;
    B[5][21] = 0;
    B[5][22] = 0;
    B[5][23] = 0;
    B[5][24] = 0;
    B[5][25] = A[1][14] + A[1][0] - A[1][9];
    B[5][26] = A[1][24] - A[1][19];
    B[5][27] = (2*A[1][0] - A[1][9])*r - A[1][25] + A[1][30];
    B[5][28] = -r*A[1][19] + A[1][33];
    B[5][29] = -r*A[1][25] + rr*A[1][0] + A[1][34];
    B[5][30] = 0;
    B[5][31] = 0;
    B[5][32] = 0;
    B[5][33] = 0;
    B[5][34] = 0;
    B[5][35] = 0;
    B[6][0] = -A[2][1] + A[2][3];
    B[6][1] = A[2][4] + A[2][0] - A[2][2];
    B[6][2] = -A[2][5] + A[2][7];
    B[6][3] = A[2][8] - A[2][6];
    B[6][4] = -A[2][1] + A[2][10];
    B[6][5] = A[2][11] + 2*A[2][0] - A[2][2] - A[2][9];
    B[6][6] = -A[2][15] + A[2][17];
    B[6][7] = A[2][18] - A[2][16];
    B[6][8] = A[2][20];
    B[6][9] = -A[2][1]*r + A[2][26];
    B[6][10] = A[2][21] - A[2][19];
    B[6][11] = (2*A[2][0] - A[2][2])*r - A[2][25] + A[2][27];
    B[6][12] = A[2][13] - A[2][6];
    B[6][13] = A[2][23] - A[2][16];
    B[6][14] = -r*A[2][6] + A[2][29];
    B[6][15] = -r*A[2][16] + A[2][32];
    B[6][16] = -A[2][5] + A[2][12];
    B[6][17] = -A[2][15] + A[2][22];
    B[6][18] = -A[2][5]*r + A[2][28];
    B[6][19] = -A[2][15]*r + A[2][31];
    B[6][20] = 0;
    B[6][21] = 0;
    B[6][22] = 0;
    B[6][23] = 0;
    B[6][24] = 0;
    B[6][25] = A[2][14] + A[2][0] - A[2][9];
    B[6][26] = A[2][24] - A[2][19];
    B[6][27] = (2*A[2][0] - A[2][9])*r - A[2][25] + A[2][30];
    B[6][28] = -r*A[2][19] + A[2][33];
    B[6][29] = -r*A[2][25] + rr*A[2][0] + A[2][34];
    B[6][30] = 0;
    B[6][31] = 0;
    B[6][32] = 0;
    B[6][33] = 0;
    B[6][34] = 0;
    B[6][35] = 0;
    B[7][0] = -A[3][1] + A[3][3];
    B[7][1] = A[3][4] + A[3][0] - A[3][2];
    B[7][2] = -A[3][5] + A[3][7];
    B[7][3] = A[3][8] - A[3][6];
    B[7][4] = -A[3][1] + A[3][10];
    B[7][5] = A[3][11] + 2*A[3][0] - A[3][2] - A[3][9];
    B[7][6] = -A[3][15] + A[3][17];
    B[7][7] = A[3][18] - A[3][16];
    B[7][8] = A[3][20];
    B[7][9] = -A[3][1]*r + A[3][26];
    B[7][10] = A[3][21] - A[3][19];
    B[7][11] = (2*A[3][0] - A[3][2])*r - A[3][25] + A[3][27];
    B[7][12] = A[3][13] - A[3][6];
    B[7][13] = A[3][23] - A[3][16];
    B[7][14] = -r*A[3][6] + A[3][29];
    B[7][15] = -r*A[3][16] + A[3][32];
    B[7][16] = -A[3][5] + A[3][12];
    B[7][17] = -A[3][15] + A[3][22];
    B[7][18] = -A[3][5]*r + A[3][28];
    B[7][19] = -A[3][15]*r + A[3][31];
    B[7][20] = 0;
    B[7][21] = 0;
    B[7][22] = 0;
    B[7][23] = 0;
    B[7][24] = 0;
    B[7][25] = A[3][14] + A[3][0] - A[3][9];
    B[7][26] = A[3][24] - A[3][19];
    B[7][27] = (2*A[3][0] - A[3][9])*r - A[3][25] + A[3][30];
    B[7][28] = -r*A[3][19] + A[3][33];
    B[7][29] = -r*A[3][25] + rr*A[3][0] + A[3][34];
    B[7][30] = 0;
    B[7][31] = 0;
    B[7][32] = 0;
    B[7][33] = 0;
    B[7][34] = 0;
    B[7][35] = 0;
    B[8][0] = 0;
    B[8][1] = 0;
    B[8][2] = -A[0][1] + A[0][3];
    B[8][3] = A[0][4] + A[0][0] - A[0][2];
    B[8][4] = -A[0][5] + A[0][7];
    B[8][5] = A[0][8] - A[0][6];
    B[8][6] = 0;
    B[8][7] = 0;
    B[8][8] = -A[0][15] + A[0][17];
    B[8][9] = 0;
    B[8][10] = A[0][18] - A[0][16];
    B[8][11] = 0;
    B[8][12] = A[0][11] + 2*A[0][0] - A[0][2] - A[0][9];
    B[8][13] = A[0][21] - A[0][19];
    B[8][14] = (2*A[0][0] - A[0][2])*r - A[0][25] + A[0][27];
    B[8][15] = 0;
    B[8][16] = -A[0][1] + A[0][10];
    B[8][17] = A[0][20];
    B[8][18] = -A[0][1]*r + A[0][26];
    B[8][19] = 0;
    B[8][20] = -A[0][5] + A[0][12];
    B[8][21] = -A[0][15] + A[0][22];
    B[8][22] = -A[0][5]*r + A[0][28];
    B[8][23] = -A[0][15]*r + A[0][31];
    B[8][24] = 0;
    B[8][25] = A[0][13] - A[0][6];
    B[8][26] = A[0][23] - A[0][16];
    B[8][27] = -r*A[0][6] + A[0][29];
    B[8][28] = -r*A[0][16] + A[0][32];
    B[8][29] = 0;
    B[8][30] = A[0][14] + A[0][0] - A[0][9];
    B[8][31] = A[0][24] - A[0][19];
    B[8][32] = (2*A[0][0] - A[0][9])*r - A[0][25] + A[0][30];
    B[8][33] = -r*A[0][19] + A[0][33];
    B[8][34] = -r*A[0][25] + rr*A[0][0] + A[0][34];
    B[8][35] = 0;
    B[9][0] = 0;
    B[9][1] = 0;
    B[9][2] = -A[1][1] + A[1][3];
    B[9][3] = A[1][4] + A[1][0] - A[1][2];
    B[9][4] = -A[1][5] + A[1][7];
    B[9][5] = A[1][8] - A[1][6];
    B[9][6] = 0;
    B[9][7] = 0;
    B[9][8] = -A[1][15] + A[1][17];
    B[9][9] = 0;
    B[9][10] = A[1][18] - A[1][16];
    B[9][11] = 0;
    B[9][12] = A[1][11] + 2*A[1][0] - A[1][2] - A[1][9];
    B[9][13] = A[1][21] - A[1][19];
    B[9][14] = (2*A[1][0] - A[1][2])*r - A[1][25] + A[1][27];
    B[9][15] = 0;
    B[9][16] = -A[1][1] + A[1][10];
    B[9][17] = A[1][20];
    B[9][18] = -A[1][1]*r + A[1][26];
    B[9][19] = 0;
    B[9][20] = -A[1][5] + A[1][12];
    B[9][21] = -A[1][15] + A[1][22];
    B[9][22] = -A[1][5]*r + A[1][28];
    B[9][23] = -A[1][15]*r + A[1][31];
    B[9][24] = 0;
    B[9][25] = A[1][13] - A[1][6];
    B[9][26] = A[1][23] - A[1][16];
    B[9][27] = -r*A[1][6] + A[1][29];
    B[9][28] = -r*A[1][16] + A[1][32];
    B[9][29] = 0;
    B[9][30] = A[1][14] + A[1][0] - A[1][9];
    B[9][31] = A[1][24] - A[1][19];
    B[9][32] = (2*A[1][0] - A[1][9])*r - A[1][25] + A[1][30];
    B[9][33] = -r*A[1][19] + A[1][33];
    B[9][34] = -r*A[1][25] + rr*A[1][0] + A[1][34];
    B[9][35] = 0;
    B[10][0] = 0;
    B[10][1] = 0;
    B[10][2] = -A[2][1] + A[2][3];
    B[10][3] = A[2][4] + A[2][0] - A[2][2];
    B[10][4] = -A[2][5] + A[2][7];
    B[10][5] = A[2][8] - A[2][6];
    B[10][6] = 0;
    B[10][7] = 0;
    B[10][8] = -A[2][15] + A[2][17];
    B[10][9] = 0;
    B[10][10] = A[2][18] - A[2][16];
    B[10][11] = 0;
    B[10][12] = A[2][11] + 2*A[2][0] - A[2][2] - A[2][9];
    B[10][13] = A[2][21] - A[2][19];
    B[10][14] = (2*A[2][0] - A[2][2])*r - A[2][25] + A[2][27];
    B[10][15] = 0;
    B[10][16] = -A[2][1] + A[2][10];
    B[10][17] = A[2][20];
    B[10][18] = -A[2][1]*r + A[2][26];
    B[10][19] = 0;
    B[10][20] = -A[2][5] + A[2][12];
    B[10][21] = -A[2][15] + A[2][22];
    B[10][22] = -A[2][5]*r + A[2][28];
    B[10][23] = -A[2][15]*r + A[2][31];
    B[10][24] = 0;
    B[10][25] = A[2][13] - A[2][6];
    B[10][26] = A[2][23] - A[2][16];
    B[10][27] = -r*A[2][6] + A[2][29];
    B[10][28] = -r*A[2][16] + A[2][32];
    B[10][29] = 0;
    B[10][30] = A[2][14] + A[2][0] - A[2][9];
    B[10][31] = A[2][24] - A[2][19];
    B[10][32] = (2*A[2][0] - A[2][9])*r - A[2][25] + A[2][30];
    B[10][33] = -r*A[2][19] + A[2][33];
    B[10][34] = -r*A[2][25] + rr*A[2][0] + A[2][34];
    B[10][35] = 0;
    B[11][0] = 0;
    B[11][1] = 0;
    B[11][2] = -A[3][1] + A[3][3];
    B[11][3] = A[3][4] + A[3][0] - A[3][2];
    B[11][4] = -A[3][5] + A[3][7];
    B[11][5] = A[3][8] - A[3][6];
    B[11][6] = 0;
    B[11][7] = 0;
    B[11][8] = -A[3][15] + A[3][17];
    B[11][9] = 0;
    B[11][10] = A[3][18] - A[3][16];
    B[11][11] = 0;
    B[11][12] = A[3][11] + 2*A[3][0] - A[3][2] - A[3][9];
    B[11][13] = A[3][21] - A[3][19];
    B[11][14] = (2*A[3][0] - A[3][2])*r - A[3][25] + A[3][27];
    B[11][15] = 0;
    B[11][16] = -A[3][1] + A[3][10];
    B[11][17] = A[3][20];
    B[11][18] = -A[3][1]*r + A[3][26];
    B[11][19] = 0;
    B[11][20] = -A[3][5] + A[3][12];
    B[11][21] = -A[3][15] + A[3][22];
    B[11][22] = -A[3][5]*r + A[3][28];
    B[11][23] = -A[3][15]*r + A[3][31];
    B[11][24] = 0;
    B[11][25] = A[3][13] - A[3][6];
    B[11][26] = A[3][23] - A[3][16];
    B[11][27] = -r*A[3][6] + A[3][29];
    B[11][28] = -r*A[3][16] + A[3][32];
    B[11][29] = 0;
    B[11][30] = A[3][14] + A[3][0] - A[3][9];
    B[11][31] = A[3][24] - A[3][19];
    B[11][32] = (2*A[3][0] - A[3][9])*r - A[3][25] + A[3][30];
    B[11][33] = -r*A[3][19] + A[3][33];
    B[11][34] = -r*A[3][25] + rr*A[3][0] + A[3][34];
    B[11][35] = 0;
    B[12][0] = 0;
    B[12][1] = 0;
    B[12][2] = 0;
    B[12][3] = 0;
    B[12][4] = 0;
    B[12][5] = 0;
    B[12][6] = -A[0][1] + A[0][3];
    B[12][7] = A[0][4] + A[0][0] - A[0][2];
    B[12][8] = -A[0][5] + A[0][7];
    B[12][9] = -A[0][15] + A[0][17];
    B[12][10] = A[0][8] - A[0][6];
    B[12][11] = A[0][18] - A[0][16];
    B[12][12] = 0;
    B[12][13] = A[0][11] + 2*A[0][0] - A[0][2] - A[0][9];
    B[12][14] = A[0][21] - A[0][19];
    B[12][15] = (2*A[0][0] - A[0][2])*r - A[0][25] + A[0][27];
    B[12][16] = 0;
    B[12][17] = -A[0][1] + A[0][10];
    B[12][18] = A[0][20];
    B[12][19] = -A[0][1]*r + A[0][26];
    B[12][20] = 0;
    B[12][21] = -A[0][5] + A[0][12];
    B[12][22] = -A[0][15] + A[0][22];
    B[12][23] = -A[0][5]*r + A[0][28];
    B[12][24] = -A[0][15]*r + A[0][31];
    B[12][25] = 0;
    B[12][26] = A[0][13] - A[0][6];
    B[12][27] = A[0][23] - A[0][16];
    B[12][28] = -r*A[0][6] + A[0][29];
    B[12][29] = -r*A[0][16] + A[0][32];
    B[12][30] = 0;
    B[12][31] = A[0][14] + A[0][0] - A[0][9];
    B[12][32] = A[0][24] - A[0][19];
    B[12][33] = (2*A[0][0] - A[0][9])*r - A[0][25] + A[0][30];
    B[12][34] = -r*A[0][19] + A[0][33];
    B[12][35] = -r*A[0][25] + rr*A[0][0] + A[0][34];
    B[13][0] = 0;
    B[13][1] = 0;
    B[13][2] = 0;
    B[13][3] = 0;
    B[13][4] = 0;
    B[13][5] = 0;
    B[13][6] = -A[1][1] + A[1][3];
    B[13][7] = A[1][4] + A[1][0] - A[1][2];
    B[13][8] = -A[1][5] + A[1][7];
    B[13][9] = -A[1][15] + A[1][17];
    B[13][10] = A[1][8] - A[1][6];
    B[13][11] = A[1][18] - A[1][16];
    B[13][12] = 0;
    B[13][13] = A[1][11] + 2*A[1][0] - A[1][2] - A[1][9];
    B[13][14] = A[1][21] - A[1][19];
    B[13][15] = (2*A[1][0] - A[1][2])*r - A[1][25] + A[1][27];
    B[13][16] = 0;
    B[13][17] = -A[1][1] + A[1][10];
    B[13][18] = A[1][20];
    B[13][19] = -A[1][1]*r + A[1][26];
    B[13][20] = 0;
    B[13][21] = -A[1][5] + A[1][12];
    B[13][22] = -A[1][15] + A[1][22];
    B[13][23] = -A[1][5]*r + A[1][28];
    B[13][24] = -A[1][15]*r + A[1][31];
    B[13][25] = 0;
    B[13][26] = A[1][13] - A[1][6];
    B[13][27] = A[1][23] - A[1][16];
    B[13][28] = -r*A[1][6] + A[1][29];
    B[13][29] = -r*A[1][16] + A[1][32];
    B[13][30] = 0;
    B[13][31] = A[1][14] + A[1][0] - A[1][9];
    B[13][32] = A[1][24] - A[1][19];
    B[13][33] = (2*A[1][0] - A[1][9])*r - A[1][25] + A[1][30];
    B[13][34] = -r*A[1][19] + A[1][33];
    B[13][35] = -r*A[1][25] + rr*A[1][0] + A[1][34];
    B[14][0] = 0;
    B[14][1] = 0;
    B[14][2] = 0;
    B[14][3] = 0;
    B[14][4] = 0;
    B[14][5] = 0;
    B[14][6] = -A[2][1] + A[2][3];
    B[14][7] = A[2][4] + A[2][0] - A[2][2];
    B[14][8] = -A[2][5] + A[2][7];
    B[14][9] = -A[2][15] + A[2][17];
    B[14][10] = A[2][8] - A[2][6];
    B[14][11] = A[2][18] - A[2][16];
    B[14][12] = 0;
    B[14][13] = A[2][11] + 2*A[2][0] - A[2][2] - A[2][9];
    B[14][14] = A[2][21] - A[2][19];
    B[14][15] = (2*A[2][0] - A[2][2])*r - A[2][25] + A[2][27];
    B[14][16] = 0;
    B[14][17] = -A[2][1] + A[2][10];
    B[14][18] = A[2][20];
    B[14][19] = -A[2][1]*r + A[2][26];
    B[14][20] = 0;
    B[14][21] = -A[2][5] + A[2][12];
    B[14][22] = -A[2][15] + A[2][22];
    B[14][23] = -A[2][5]*r + A[2][28];
    B[14][24] = -A[2][15]*r + A[2][31];
    B[14][25] = 0;
    B[14][26] = A[2][13] - A[2][6];
    B[14][27] = A[2][23] - A[2][16];
    B[14][28] = -r*A[2][6] + A[2][29];
    B[14][29] = -r*A[2][16] + A[2][32];
    B[14][30] = 0;
    B[14][31] = A[2][14] + A[2][0] - A[2][9];
    B[14][32] = A[2][24] - A[2][19];
    B[14][33] = (2*A[2][0] - A[2][9])*r - A[2][25] + A[2][30];
    B[14][34] = -r*A[2][19] + A[2][33];
    B[14][35] = -r*A[2][25] + rr*A[2][0] + A[2][34];
    B[15][0] = 0;
    B[15][1] = 0;
    B[15][2] = 0;
    B[15][3] = 0;
    B[15][4] = 0;
    B[15][5] = 0;
    B[15][6] = -A[3][1] + A[3][3];
    B[15][7] = A[3][4] + A[3][0] - A[3][2];
    B[15][8] = -A[3][5] + A[3][7];
    B[15][9] = -A[3][15] + A[3][17];
    B[15][10] = A[3][8] - A[3][6];
    B[15][11] = A[3][18] - A[3][16];
    B[15][12] = 0;
    B[15][13] = A[3][11] + 2*A[3][0] - A[3][2] - A[3][9];
    B[15][14] = A[3][21] - A[3][19];
    B[15][15] = (2*A[3][0] - A[3][2])*r - A[3][25] + A[3][27];
    B[15][16] = 0;
    B[15][17] = -A[3][1] + A[3][10];
    B[15][18] = A[3][20];
    B[15][19] = -A[3][1]*r + A[3][26];
    B[15][20] = 0;
    B[15][21] = -A[3][5] + A[3][12];
    B[15][22] = -A[3][15] + A[3][22];
    B[15][23] = -A[3][5]*r + A[3][28];
    B[15][24] = -A[3][15]*r + A[3][31];
    B[15][25] = 0;
    B[15][26] = A[3][13] - A[3][6];
    B[15][27] = A[3][23] - A[3][16];
    B[15][28] = -r*A[3][6] + A[3][29];
    B[15][29] = -r*A[3][16] + A[3][32];
    B[15][30] = 0;
    B[15][31] = A[3][14] + A[3][0] - A[3][9];
    B[15][32] = A[3][24] - A[3][19];
    B[15][33] = (2*A[3][0] - A[3][9])*r - A[3][25] + A[3][30];
    B[15][34] = -r*A[3][19] + A[3][33];
    B[15][35] = -r*A[3][25] + rr*A[3][0] + A[3][34];

} // end auxArrays::matrix16x36()



// find the basis of the null space of an M x N matrix A (M < N) using specifically tailored QR factorization,
// result is N - M N-vectors Q
template <const int M, const int N>
void nullQR (double A[M][N], double Q[N - M][N]) // matrix A changes during computation!!!
{
    const int NM = N - M, M1 = M - 1;

    // find Hauseholder vectors
    for (int j = 0; j < M; ++j)
    {
        double t = 0;
        for (int i = j + 1; i < N; ++i)
            t += pow(A[j][i], 2);
        double mu = sqrt(pow(A[j][j], 2) + t);
        mu = (A[j][j]<0)? 1.0/(A[j][j] - mu) : 1.0/(A[j][j] + mu);

        //A[j][j] = 1.0;
        for (int i = j + 1; i < N; ++i)
            A[j][i] *= mu;

        const double beta = -2.0/(1.0 + t*pow(mu, 2));
        for (int k = j + 1; k < M; ++k)
        {
            double w = A[k][j];
            for (int i = j + 1; i < N; ++i)
                w += A[k][i]*A[j][i];
            w *= beta;
            for (int i = j + 1; i < N; ++i)
                A[k][i] += A[j][i]*w;
        }
    }

    // multiply m Householder matrices, inverse order is more efficient
    // we only need last N - M columns of the resulting matrix
    for (int i = 0; i < NM; ++i)
        memset(Q[i], 0, sizeof(double)*M1);
    //    for (int k = 0; k < M1; ++k)
    //        Q[i][k] = 0.0;
    
    // start from Mth matrix
    double beta = 1.0;
    for (int i = M; i < N; ++i)
        beta += pow(A[M1][i], 2);

    beta = -2.0/beta;
    for (int k = 0; k < NM; ++k)
    {
        Q[k][M1] = A[M1][k + M]*beta;
        for (int i = M; i < N; ++i)
            Q[k][i] = (k == i - M)? 1.0 + A[M1][i]*Q[k][M1] : A[M1][i]*Q[k][M1];
    }
    
    // multiply by the remaining M-1 matrices
    for (int j = M1 - 1; j >= 0; --j)
    {
        double beta = 1.0;
        for (int i = j + 1; i < N; ++i)
            beta += pow(A[j][i], 2);

        beta = -2.0/beta;
        for (int k = 0; k < NM; ++k)
        {
            double w = Q[k][j];
            for (int i = j + 1; i < N; ++i)
                w += Q[k][i]*A[j][i];
            w *= beta;
            Q[k][j] += w;
            for (int i = j + 1; i < N; ++i)
                Q[k][i] += A[j][i]*w;
        }
    }

} // end nullQR()



// Specifically tailored Gauss-Jordan elimination with partial pivoting on M x N matrix B
void gj (double B[16][36])
{
    const int M = 16, N = 36;
    for (int i = 0; i < M; ++i)
    { // index i numbers first M columns of B
        int ipiv = i, i1 = i + 1;
        double piv = B[i][i];
        for (int k = i1; k < M; ++k)
        {
            if (fabs(B[k][i]) > fabs(piv))
            {
                piv = B[k][i];
                ipiv = k;
            }
        }

        const int k1 = (i < 10)? i1 : 10; // optimization!!!

        if (!piv) continue;
        B[ipiv][i] = B[i][i];
        B[i][i] = piv;
        piv = 1.0/piv;
        for (int j = i1; j < N; ++j)
        { // index j numbers columns of B from i1 to N - 1
            const double t = B[ipiv][j];
            B[ipiv][j] = B[i][j];
            B[i][j] = t*piv;
            for (int k = k1; k < M; ++k)
            { // index k numbers rows of B from k1 to M - 1
                if (k == i) continue;
                B[k][j] -= B[i][j]*B[k][i];
            }
        }
    }

} // end gj()



// compute determinant of 4x4 matrix, the result is a polynomial p(x) of degree 20.
void auxArrays::det4x4 ()
{
    double q[6][10], r[4][15];
    const int i2[6][2] = {{0, 1}, {0, 2}, {0, 3}, {1, 2}, {1, 3}, {2, 3}};
    const int i3[4][3] = {{0, 1, 2}, {0, 1, 3}, {0, 2, 3}, {1, 2, 3}};
    const int a3[4][3] = {{3, 1, 0}, {4, 2, 0}, {5, 2, 1}, {5, 4, 3}};

    for (int i = 0; i < 6; ++i)
    { // 6 2-minors
        const int j = i2[i][0], k = i2[i][1];
        q[i][0] = D[j][0][0]*D[k][1][0] - D[j][1][0]*D[k][0][0];
        q[i][1] = D[j][0][0]*D[k][1][1] + D[j][0][1]*D[k][1][0] - D[j][1][0]*D[k][0][1] - D[j][1][1]*D[k][0][0];
        q[i][2] = D[j][0][0]*D[k][1][2] + D[j][0][1]*D[k][1][1] + D[j][0][2]*D[k][1][0] - D[j][1][0]*D[k][0][2] - D[j][1][1]*D[k][0][1] - D[j][1][2]*D[k][0][0];
        q[i][3] = D[j][0][0]*D[k][1][3] + D[j][0][1]*D[k][1][2] + D[j][0][2]*D[k][1][1] + D[j][0][3]*D[k][1][0] - D[j][1][0]*D[k][0][3] - D[j][1][1]*D[k][0][2] - D[j][1][2]*D[k][0][1] - D[j][1][3]*D[k][0][0];
        q[i][4] = D[j][0][0]*D[k][1][4] + D[j][0][1]*D[k][1][3] + D[j][0][2]*D[k][1][2] + D[j][0][3]*D[k][1][1] + D[j][0][4]*D[k][1][0] - D[j][1][0]*D[k][0][4] - D[j][1][1]*D[k][0][3] - D[j][1][2]*D[k][0][2] - D[j][1][3]*D[k][0][1] - D[j][1][4]*D[k][0][0];
        q[i][5] = D[j][0][0]*D[k][1][5] + D[j][0][1]*D[k][1][4] + D[j][0][2]*D[k][1][3] + D[j][0][3]*D[k][1][2] + D[j][0][4]*D[k][1][1] - D[j][1][1]*D[k][0][4] - D[j][1][2]*D[k][0][3] - D[j][1][3]*D[k][0][2] - D[j][1][4]*D[k][0][1] - D[j][1][5]*D[k][0][0];
        q[i][6] = D[j][0][1]*D[k][1][5] + D[j][0][2]*D[k][1][4] + D[j][0][3]*D[k][1][3] + D[j][0][4]*D[k][1][2] - D[j][1][2]*D[k][0][4] - D[j][1][3]*D[k][0][3] - D[j][1][4]*D[k][0][2] - D[j][1][5]*D[k][0][1];
        q[i][7] = D[j][0][2]*D[k][1][5] + D[j][0][3]*D[k][1][4] + D[j][0][4]*D[k][1][3] - D[j][1][3]*D[k][0][4] - D[j][1][4]*D[k][0][3] - D[j][1][5]*D[k][0][2];
        q[i][8] = D[j][0][3]*D[k][1][5] + D[j][0][4]*D[k][1][4] - D[j][1][4]*D[k][0][4] - D[j][1][5]*D[k][0][3];
        q[i][9] = D[j][0][4]*D[k][1][5] - D[j][1][5]*D[k][0][4];
    }

    for (int i = 0; i < 4; ++i)
    { // 4 3-minors
        const int j = i3[i][0], k = i3[i][1], l = i3[i][2];
        const int b = a3[i][0], c = a3[i][1], d = a3[i][2];
        r[i][0] = q[b][0]*D[j][2][0]-q[c][0]*D[k][2][0]+q[d][0]*D[l][2][0];
        r[i][1] = q[b][0]*D[j][2][1]+q[b][1]*D[j][2][0]-q[c][0]*D[k][2][1]-q[c][1]*D[k][2][0]+q[d][0]*D[l][2][1]+q[d][1]*D[l][2][0];
        r[i][2] = q[b][0]*D[j][2][2]+q[b][1]*D[j][2][1]+q[b][2]*D[j][2][0]-q[c][0]*D[k][2][2]-q[c][1]*D[k][2][1]-q[c][2]*D[k][2][0]+q[d][0]*D[l][2][2]+q[d][1]*D[l][2][1]+q[d][2]*D[l][2][0];
        r[i][3] = q[b][0]*D[j][2][3]+q[b][1]*D[j][2][2]+q[b][2]*D[j][2][1]+q[b][3]*D[j][2][0]-q[c][0]*D[k][2][3]-q[c][1]*D[k][2][2]-q[c][2]*D[k][2][1]-q[c][3]*D[k][2][0]+q[d][0]*D[l][2][3]+q[d][1]*D[l][2][2]+q[d][2]*D[l][2][1]+q[d][3]*D[l][2][0];
        r[i][4] = q[b][0]*D[j][2][4]+q[b][1]*D[j][2][3]+q[b][2]*D[j][2][2]+q[b][3]*D[j][2][1]+q[b][4]*D[j][2][0]-q[c][0]*D[k][2][4]-q[c][1]*D[k][2][3]-q[c][2]*D[k][2][2]-q[c][3]*D[k][2][1]-q[c][4]*D[k][2][0]+q[d][0]*D[l][2][4]+q[d][1]*D[l][2][3]+q[d][2]*D[l][2][2]+q[d][3]*D[l][2][1]+q[d][4]*D[l][2][0];
        r[i][5] = q[b][0]*D[j][2][5]+q[b][1]*D[j][2][4]+q[b][2]*D[j][2][3]+q[b][3]*D[j][2][2]+q[b][4]*D[j][2][1]+q[b][5]*D[j][2][0]-q[c][0]*D[k][2][5]-q[c][1]*D[k][2][4]-q[c][2]*D[k][2][3]-q[c][3]*D[k][2][2]-q[c][4]*D[k][2][1]-q[c][5]*D[k][2][0]+q[d][0]*D[l][2][5]+q[d][1]*D[l][2][4]+q[d][2]*D[l][2][3]+q[d][3]*D[l][2][2]+q[d][4]*D[l][2][1]+q[d][5]*D[l][2][0];
        r[i][6] = q[b][1]*D[j][2][5]+q[b][2]*D[j][2][4]+q[b][3]*D[j][2][3]+q[b][4]*D[j][2][2]+q[b][5]*D[j][2][1]+q[b][6]*D[j][2][0]-q[c][1]*D[k][2][5]-q[c][2]*D[k][2][4]-q[c][3]*D[k][2][3]-q[c][4]*D[k][2][2]-q[c][5]*D[k][2][1]-q[c][6]*D[k][2][0]+q[d][1]*D[l][2][5]+q[d][2]*D[l][2][4]+q[d][3]*D[l][2][3]+q[d][4]*D[l][2][2]+q[d][5]*D[l][2][1]+q[d][6]*D[l][2][0];
        r[i][7] = q[b][2]*D[j][2][5]+q[b][3]*D[j][2][4]+q[b][4]*D[j][2][3]+q[b][5]*D[j][2][2]+q[b][6]*D[j][2][1]+q[b][7]*D[j][2][0]-q[c][2]*D[k][2][5]-q[c][3]*D[k][2][4]-q[c][4]*D[k][2][3]-q[c][5]*D[k][2][2]-q[c][6]*D[k][2][1]-q[c][7]*D[k][2][0]+q[d][2]*D[l][2][5]+q[d][3]*D[l][2][4]+q[d][4]*D[l][2][3]+q[d][5]*D[l][2][2]+q[d][6]*D[l][2][1]+q[d][7]*D[l][2][0];
        r[i][8] = q[b][3]*D[j][2][5]+q[b][4]*D[j][2][4]+q[b][5]*D[j][2][3]+q[b][6]*D[j][2][2]+q[b][7]*D[j][2][1]+q[b][8]*D[j][2][0]-q[c][3]*D[k][2][5]-q[c][4]*D[k][2][4]-q[c][5]*D[k][2][3]-q[c][6]*D[k][2][2]-q[c][7]*D[k][2][1]-q[c][8]*D[k][2][0]+q[d][3]*D[l][2][5]+q[d][4]*D[l][2][4]+q[d][5]*D[l][2][3]+q[d][6]*D[l][2][2]+q[d][7]*D[l][2][1]+q[d][8]*D[l][2][0];
        r[i][9] = q[b][4]*D[j][2][5]+q[b][5]*D[j][2][4]+q[b][6]*D[j][2][3]+q[b][7]*D[j][2][2]+q[b][8]*D[j][2][1]+q[b][9]*D[j][2][0]-q[c][4]*D[k][2][5]-q[c][5]*D[k][2][4]-q[c][6]*D[k][2][3]-q[c][7]*D[k][2][2]-q[c][8]*D[k][2][1]-q[c][9]*D[k][2][0]+q[d][4]*D[l][2][5]+q[d][5]*D[l][2][4]+q[d][6]*D[l][2][3]+q[d][7]*D[l][2][2]+q[d][8]*D[l][2][1]+q[d][9]*D[l][2][0];
        r[i][10] = q[b][5]*D[j][2][5]+q[b][6]*D[j][2][4]+q[b][7]*D[j][2][3]+q[b][8]*D[j][2][2]+q[b][9]*D[j][2][1]-q[c][5]*D[k][2][5]-q[c][6]*D[k][2][4]-q[c][7]*D[k][2][3]-q[c][8]*D[k][2][2]-q[c][9]*D[k][2][1]+q[d][5]*D[l][2][5]+q[d][6]*D[l][2][4]+q[d][7]*D[l][2][3]+q[d][8]*D[l][2][2]+q[d][9]*D[l][2][1];
        r[i][11] = q[b][6]*D[j][2][5]+q[b][7]*D[j][2][4]+q[b][8]*D[j][2][3]+q[b][9]*D[j][2][2]-q[c][6]*D[k][2][5]-q[c][7]*D[k][2][4]-q[c][8]*D[k][2][3]-q[c][9]*D[k][2][2]+q[d][6]*D[l][2][5]+q[d][7]*D[l][2][4]+q[d][8]*D[l][2][3]+q[d][9]*D[l][2][2];
        r[i][12] = q[b][7]*D[j][2][5]+q[b][8]*D[j][2][4]+q[b][9]*D[j][2][3]-q[c][7]*D[k][2][5]-q[c][8]*D[k][2][4]-q[c][9]*D[k][2][3]+q[d][7]*D[l][2][5]+q[d][8]*D[l][2][4]+q[d][9]*D[l][2][3];
        r[i][13] = q[b][8]*D[j][2][5]+q[b][9]*D[j][2][4]-q[c][8]*D[k][2][5]-q[c][9]*D[k][2][4]+q[d][8]*D[l][2][5]+q[d][9]*D[l][2][4];
        r[i][14] = q[b][9]*D[j][2][5]-q[c][9]*D[k][2][5]+q[d][9]*D[l][2][5];
    }

    p[0] = -r[0][0]*D[3][3][0]+r[1][0]*D[2][3][0]-r[2][0]*D[1][3][0]+r[3][0]*D[0][3][0];
    p[1] = -r[0][0]*D[3][3][1]-r[0][1]*D[3][3][0]+r[1][0]*D[2][3][1]+r[1][1]*D[2][3][0]-r[2][0]*D[1][3][1]-r[2][1]*D[1][3][0]+r[3][0]*D[0][3][1]+r[3][1]*D[0][3][0];
    p[2] = -r[0][0]*D[3][3][2]-r[0][1]*D[3][3][1]-r[0][2]*D[3][3][0]+r[1][0]*D[2][3][2]+r[1][1]*D[2][3][1]+r[1][2]*D[2][3][0]-r[2][0]*D[1][3][2]-r[2][1]*D[1][3][1]-r[2][2]*D[1][3][0]+r[3][0]*D[0][3][2]+r[3][1]*D[0][3][1]+r[3][2]*D[0][3][0];
    p[3] = r[3][0]*D[0][3][3]+r[3][1]*D[0][3][2]+r[3][2]*D[0][3][1]+r[3][3]*D[0][3][0]-r[2][0]*D[1][3][3]-r[2][1]*D[1][3][2]-r[2][2]*D[1][3][1]-r[2][3]*D[1][3][0]+r[1][0]*D[2][3][3]+r[1][1]*D[2][3][2]+r[1][2]*D[2][3][1]+r[1][3]*D[2][3][0]-r[0][0]*D[3][3][3]-r[0][1]*D[3][3][2]-r[0][2]*D[3][3][1]-r[0][3]*D[3][3][0];
    p[4] = r[3][0]*D[0][3][4]+r[3][1]*D[0][3][3]+r[3][2]*D[0][3][2]+r[3][3]*D[0][3][1]+r[3][4]*D[0][3][0]-r[2][0]*D[1][3][4]-r[2][1]*D[1][3][3]-r[2][2]*D[1][3][2]-r[2][3]*D[1][3][1]-r[2][4]*D[1][3][0]+r[1][0]*D[2][3][4]+r[1][1]*D[2][3][3]+r[1][2]*D[2][3][2]+r[1][3]*D[2][3][1]+r[1][4]*D[2][3][0]-r[0][0]*D[3][3][4]-r[0][1]*D[3][3][3]-r[0][2]*D[3][3][2]-r[0][3]*D[3][3][1]-r[0][4]*D[3][3][0];
    p[5] = r[3][0]*D[0][3][5]+r[3][1]*D[0][3][4]+r[3][2]*D[0][3][3]+r[3][3]*D[0][3][2]+r[3][4]*D[0][3][1]+r[3][5]*D[0][3][0]-r[2][0]*D[1][3][5]-r[2][1]*D[1][3][4]-r[2][2]*D[1][3][3]-r[2][3]*D[1][3][2]-r[2][4]*D[1][3][1]-r[2][5]*D[1][3][0]+r[1][0]*D[2][3][5]+r[1][1]*D[2][3][4]+r[1][2]*D[2][3][3]+r[1][3]*D[2][3][2]+r[1][4]*D[2][3][1]+r[1][5]*D[2][3][0]-r[0][0]*D[3][3][5]-r[0][1]*D[3][3][4]-r[0][2]*D[3][3][3]-r[0][3]*D[3][3][2]-r[0][4]*D[3][3][1]-r[0][5]*D[3][3][0];
    p[6] = -r[0][0]*D[3][3][6]-r[0][1]*D[3][3][5]-r[0][2]*D[3][3][4]-r[0][3]*D[3][3][3]-r[0][4]*D[3][3][2]-r[0][5]*D[3][3][1]-r[0][6]*D[3][3][0]-r[2][1]*D[1][3][5]-r[2][2]*D[1][3][4]-r[2][3]*D[1][3][3]-r[2][4]*D[1][3][2]-r[2][5]*D[1][3][1]-r[2][6]*D[1][3][0]+r[1][0]*D[2][3][6]+r[1][1]*D[2][3][5]+r[1][2]*D[2][3][4]+r[1][3]*D[2][3][3]+r[1][4]*D[2][3][2]+r[1][5]*D[2][3][1]+r[1][6]*D[2][3][0]+r[3][0]*D[0][3][6]+r[3][1]*D[0][3][5]+r[3][2]*D[0][3][4]+r[3][3]*D[0][3][3]+r[3][4]*D[0][3][2]+r[3][5]*D[0][3][1]+r[3][6]*D[0][3][0]-r[2][0]*D[1][3][6];
    p[7] = -r[0][1]*D[3][3][6]-r[0][2]*D[3][3][5]-r[0][3]*D[3][3][4]-r[0][4]*D[3][3][3]-r[0][5]*D[3][3][2]-r[0][6]*D[3][3][1]-r[0][7]*D[3][3][0]-r[2][1]*D[1][3][6]-r[2][2]*D[1][3][5]-r[2][3]*D[1][3][4]-r[2][4]*D[1][3][3]-r[2][5]*D[1][3][2]-r[2][6]*D[1][3][1]-r[2][7]*D[1][3][0]+r[1][1]*D[2][3][6]+r[1][2]*D[2][3][5]+r[1][3]*D[2][3][4]+r[1][4]*D[2][3][3]+r[1][5]*D[2][3][2]+r[1][6]*D[2][3][1]+r[1][7]*D[2][3][0]+r[3][1]*D[0][3][6]+r[3][2]*D[0][3][5]+r[3][3]*D[0][3][4]+r[3][4]*D[0][3][3]+r[3][5]*D[0][3][2]+r[3][6]*D[0][3][1]+r[3][7]*D[0][3][0];
    p[8] = -r[0][2]*D[3][3][6]-r[0][3]*D[3][3][5]-r[0][4]*D[3][3][4]-r[0][5]*D[3][3][3]-r[0][6]*D[3][3][2]-r[0][7]*D[3][3][1]-r[0][8]*D[3][3][0]-r[2][2]*D[1][3][6]-r[2][3]*D[1][3][5]-r[2][4]*D[1][3][4]-r[2][5]*D[1][3][3]-r[2][6]*D[1][3][2]-r[2][7]*D[1][3][1]-r[2][8]*D[1][3][0]+r[1][2]*D[2][3][6]+r[1][3]*D[2][3][5]+r[1][4]*D[2][3][4]+r[1][5]*D[2][3][3]+r[1][6]*D[2][3][2]+r[1][7]*D[2][3][1]+r[1][8]*D[2][3][0]+r[3][2]*D[0][3][6]+r[3][3]*D[0][3][5]+r[3][4]*D[0][3][4]+r[3][5]*D[0][3][3]+r[3][6]*D[0][3][2]+r[3][7]*D[0][3][1]+r[3][8]*D[0][3][0];
    p[9] = -r[0][3]*D[3][3][6]-r[0][4]*D[3][3][5]-r[0][5]*D[3][3][4]-r[0][6]*D[3][3][3]-r[0][7]*D[3][3][2]-r[0][8]*D[3][3][1]-r[0][9]*D[3][3][0]-r[2][3]*D[1][3][6]-r[2][4]*D[1][3][5]-r[2][5]*D[1][3][4]-r[2][6]*D[1][3][3]-r[2][7]*D[1][3][2]-r[2][8]*D[1][3][1]-r[2][9]*D[1][3][0]+r[1][3]*D[2][3][6]+r[1][4]*D[2][3][5]+r[1][5]*D[2][3][4]+r[1][6]*D[2][3][3]+r[1][7]*D[2][3][2]+r[1][8]*D[2][3][1]+r[1][9]*D[2][3][0]+r[3][3]*D[0][3][6]+r[3][4]*D[0][3][5]+r[3][5]*D[0][3][4]+r[3][6]*D[0][3][3]+r[3][7]*D[0][3][2]+r[3][8]*D[0][3][1]+r[3][9]*D[0][3][0];
    p[10] = r[1][4]*D[2][3][6]+r[1][5]*D[2][3][5]+r[1][6]*D[2][3][4]+r[1][7]*D[2][3][3]+r[1][8]*D[2][3][2]+r[1][9]*D[2][3][1]+r[1][10]*D[2][3][0]-r[0][4]*D[3][3][6]-r[0][5]*D[3][3][5]-r[0][6]*D[3][3][4]-r[0][7]*D[3][3][3]-r[0][8]*D[3][3][2]-r[0][9]*D[3][3][1]-r[0][10]*D[3][3][0]+r[3][6]*D[0][3][4]+r[3][7]*D[0][3][3]+r[3][8]*D[0][3][2]+r[3][9]*D[0][3][1]+r[3][10]*D[0][3][0]-r[2][4]*D[1][3][6]-r[2][5]*D[1][3][5]-r[2][6]*D[1][3][4]-r[2][7]*D[1][3][3]-r[2][8]*D[1][3][2]-r[2][9]*D[1][3][1]-r[2][10]*D[1][3][0]+r[3][4]*D[0][3][6]+r[3][5]*D[0][3][5];
    p[11] = -r[0][5]*D[3][3][6]-r[0][6]*D[3][3][5]-r[0][7]*D[3][3][4]-r[0][8]*D[3][3][3]-r[0][9]*D[3][3][2]-r[0][10]*D[3][3][1]-r[0][11]*D[3][3][0]+r[1][5]*D[2][3][6]+r[1][6]*D[2][3][5]+r[1][7]*D[2][3][4]+r[1][8]*D[2][3][3]+r[1][9]*D[2][3][2]+r[1][10]*D[2][3][1]+r[1][11]*D[2][3][0]-r[2][5]*D[1][3][6]-r[2][6]*D[1][3][5]-r[2][7]*D[1][3][4]-r[2][8]*D[1][3][3]-r[2][9]*D[1][3][2]-r[2][10]*D[1][3][1]-r[2][11]*D[1][3][0]+r[3][5]*D[0][3][6]+r[3][6]*D[0][3][5]+r[3][7]*D[0][3][4]+r[3][8]*D[0][3][3]+r[3][9]*D[0][3][2]+r[3][10]*D[0][3][1]+r[3][11]*D[0][3][0];
    p[12] = -r[0][12]*D[3][3][0]-r[0][6]*D[3][3][6]-r[0][7]*D[3][3][5]-r[0][8]*D[3][3][4]-r[0][9]*D[3][3][3]-r[0][10]*D[3][3][2]-r[0][11]*D[3][3][1]+r[1][6]*D[2][3][6]+r[1][7]*D[2][3][5]+r[1][8]*D[2][3][4]+r[1][9]*D[2][3][3]+r[1][10]*D[2][3][2]+r[1][11]*D[2][3][1]+r[1][12]*D[2][3][0]-r[2][6]*D[1][3][6]-r[2][7]*D[1][3][5]-r[2][8]*D[1][3][4]-r[2][9]*D[1][3][3]-r[2][10]*D[1][3][2]-r[2][11]*D[1][3][1]-r[2][12]*D[1][3][0]+r[3][6]*D[0][3][6]+r[3][7]*D[0][3][5]+r[3][8]*D[0][3][4]+r[3][9]*D[0][3][3]+r[3][10]*D[0][3][2]+r[3][11]*D[0][3][1]+r[3][12]*D[0][3][0];
    p[13] = -r[0][12]*D[3][3][1]-r[0][13]*D[3][3][0]+r[1][13]*D[2][3][0]-r[0][7]*D[3][3][6]-r[0][8]*D[3][3][5]-r[0][9]*D[3][3][4]-r[0][10]*D[3][3][3]-r[0][11]*D[3][3][2]+r[1][7]*D[2][3][6]+r[1][8]*D[2][3][5]+r[1][9]*D[2][3][4]+r[1][10]*D[2][3][3]+r[1][11]*D[2][3][2]+r[1][12]*D[2][3][1]-r[2][7]*D[1][3][6]-r[2][8]*D[1][3][5]-r[2][9]*D[1][3][4]-r[2][10]*D[1][3][3]-r[2][11]*D[1][3][2]-r[2][12]*D[1][3][1]-r[2][13]*D[1][3][0]+r[3][7]*D[0][3][6]+r[3][8]*D[0][3][5]+r[3][9]*D[0][3][4]+r[3][10]*D[0][3][3]+r[3][11]*D[0][3][2]+r[3][12]*D[0][3][1]+r[3][13]*D[0][3][0];
    p[14] = -r[0][12]*D[3][3][2]-r[0][13]*D[3][3][1]-r[0][14]*D[3][3][0]+r[1][13]*D[2][3][1]+r[1][14]*D[2][3][0]-r[0][8]*D[3][3][6]-r[0][9]*D[3][3][5]-r[0][10]*D[3][3][4]-r[0][11]*D[3][3][3]-r[2][14]*D[1][3][0]+r[1][8]*D[2][3][6]+r[1][9]*D[2][3][5]+r[1][10]*D[2][3][4]+r[1][11]*D[2][3][3]+r[1][12]*D[2][3][2]-r[2][8]*D[1][3][6]-r[2][9]*D[1][3][5]-r[2][10]*D[1][3][4]-r[2][11]*D[1][3][3]-r[2][12]*D[1][3][2]-r[2][13]*D[1][3][1]+r[3][8]*D[0][3][6]+r[3][9]*D[0][3][5]+r[3][10]*D[0][3][4]+r[3][11]*D[0][3][3]+r[3][12]*D[0][3][2]+r[3][13]*D[0][3][1]+r[3][14]*D[0][3][0];
    p[15] = r[3][9]*D[0][3][6]+r[3][10]*D[0][3][5]+r[3][11]*D[0][3][4]+r[3][12]*D[0][3][3]+r[3][13]*D[0][3][2]+r[3][14]*D[0][3][1]-r[2][9]*D[1][3][6]-r[2][10]*D[1][3][5]-r[2][11]*D[1][3][4]-r[2][12]*D[1][3][3]-r[2][13]*D[1][3][2]-r[2][14]*D[1][3][1]+r[1][9]*D[2][3][6]+r[1][10]*D[2][3][5]+r[1][11]*D[2][3][4]+r[1][12]*D[2][3][3]+r[1][13]*D[2][3][2]+r[1][14]*D[2][3][1]-r[0][9]*D[3][3][6]-r[0][10]*D[3][3][5]-r[0][11]*D[3][3][4]-r[0][12]*D[3][3][3]-r[0][13]*D[3][3][2]-r[0][14]*D[3][3][1];
    p[16] = r[3][10]*D[0][3][6]+r[3][11]*D[0][3][5]+r[3][12]*D[0][3][4]+r[3][13]*D[0][3][3]+r[3][14]*D[0][3][2]-r[2][10]*D[1][3][6]-r[2][11]*D[1][3][5]-r[2][12]*D[1][3][4]-r[2][13]*D[1][3][3]-r[2][14]*D[1][3][2]+r[1][10]*D[2][3][6]+r[1][11]*D[2][3][5]+r[1][12]*D[2][3][4]+r[1][13]*D[2][3][3]+r[1][14]*D[2][3][2]-r[0][10]*D[3][3][6]-r[0][11]*D[3][3][5]-r[0][12]*D[3][3][4]-r[0][13]*D[3][3][3]-r[0][14]*D[3][3][2];
    p[17] = r[3][11]*D[0][3][6]+r[3][12]*D[0][3][5]+r[3][13]*D[0][3][4]+r[3][14]*D[0][3][3]-r[2][11]*D[1][3][6]-r[2][12]*D[1][3][5]-r[2][13]*D[1][3][4]-r[2][14]*D[1][3][3]+r[1][11]*D[2][3][6]+r[1][12]*D[2][3][5]+r[1][13]*D[2][3][4]+r[1][14]*D[2][3][3]-r[0][11]*D[3][3][6]-r[0][12]*D[3][3][5]-r[0][13]*D[3][3][4]-r[0][14]*D[3][3][3];
    p[18] = -r[0][12]*D[3][3][6]-r[0][13]*D[3][3][5]-r[0][14]*D[3][3][4]+r[1][12]*D[2][3][6]+r[1][13]*D[2][3][5]+r[1][14]*D[2][3][4]-r[2][12]*D[1][3][6]-r[2][13]*D[1][3][5]-r[2][14]*D[1][3][4]+r[3][12]*D[0][3][6]+r[3][13]*D[0][3][5]+r[3][14]*D[0][3][4];
    p[19] = -r[0][13]*D[3][3][6]-r[0][14]*D[3][3][5]+r[1][13]*D[2][3][6]+r[1][14]*D[2][3][5]-r[2][13]*D[1][3][6]-r[2][14]*D[1][3][5]+r[3][13]*D[0][3][6]+r[3][14]*D[0][3][5];
    p[20] = -r[0][14]*D[3][3][6]+r[1][14]*D[2][3][6]-r[2][14]*D[1][3][6]+r[3][14]*D[0][3][6];

} // end auxArrays::det4x4()



// compute 20th degree univariate polynomial
void auxArrays::poly20 ()
{
    gj(B);
    // w^0
    D[0][0][0] = -B[10][19];
    D[0][1][0] = -B[10][24];
    D[0][2][0] = -B[10][29];
    D[0][3][0] = -B[10][35];
    D[1][0][0] = -B[12][19];
    D[1][1][0] = -B[12][24];
    D[1][2][0] = -B[12][29];
    D[1][3][0] = -B[12][35];
    D[2][0][0] = -B[13][19];
    D[2][1][0] = -B[13][24];
    D[2][2][0] = -B[13][29];
    D[2][3][0] = -B[13][35];
    D[3][0][0] = -B[14][19];
    D[3][1][0] = -B[14][24];
    D[3][2][0] = -B[14][29];
    D[3][3][0] = -B[14][35];
    // w^1
    D[0][0][1] = -B[10][18] + B[11][19];
    D[0][1][1] = -B[10][23] + B[11][24];
    D[0][2][1] = -B[10][28] + B[11][29];
    D[0][3][1] = -B[10][34] + B[11][35];
    D[1][0][1] = -B[12][18] + B[13][19];
    D[1][1][1] = -B[12][23] + B[13][24];
    D[1][2][1] = -B[12][28] + B[13][29];
    D[1][3][1] = -B[12][34] + B[13][35];
    D[2][0][1] = -B[13][18] + B[14][19];
    D[2][1][1] = -B[13][23] + B[14][24];
    D[2][2][1] = -B[13][28] + B[14][29];
    D[2][3][1] = -B[13][34] + B[14][35];
    D[3][0][1] = -B[14][18] + B[15][19];
    D[3][1][1] = -B[14][23] + B[15][24];
    D[3][2][1] = -B[14][28] + B[15][29];
    D[3][3][1] = -B[14][34] + B[15][35];
    // w^2
    D[0][0][2] = -B[10][17] + B[11][18];
    D[0][1][2] = -B[10][22] + B[11][23];
    D[0][2][2] = -B[10][27] + B[11][28];
    D[0][3][2] = -B[10][33] + B[11][34];
    D[1][0][2] = -B[12][17] + B[13][18];
    D[1][1][2] = -B[12][22] + B[13][23];
    D[1][2][2] = -B[12][27] + B[13][28];
    D[1][3][2] = -B[12][33] + B[13][34];
    D[2][0][2] = -B[13][17] + B[14][18];
    D[2][1][2] = -B[13][22] + B[14][23];
    D[2][2][2] = -B[13][27] + B[14][28];
    D[2][3][2] = -B[13][33] + B[14][34];
    D[3][0][2] = -B[14][17] + B[15][18];
    D[3][1][2] = -B[14][22] + B[15][23];
    D[3][2][2] = -B[14][27] + B[15][28];
    D[3][3][2] = -B[14][33] + B[15][34];
    // w^3
    D[0][0][3] = -B[10][16] + B[11][17];
    D[0][1][3] = -B[10][21] + B[11][22];
    D[0][2][3] = -B[10][26] + B[11][27];
    D[0][3][3] = -B[10][32] + B[11][33];
    D[1][0][3] = -B[12][16] + B[13][17];
    D[1][1][3] = -B[12][21] + B[13][22];
    D[1][2][3] = -B[12][26] + B[13][27];
    D[1][3][3] = -B[12][32] + B[13][33];
    D[2][0][3] = -B[13][16] + B[14][17];
    D[2][1][3] = -B[13][21] + B[14][22];
    D[2][2][3] = -B[13][26] + B[14][27];
    D[2][3][3] = -B[13][32] + B[14][33];
    D[3][0][3] = -B[14][16] + B[15][17];
    D[3][1][3] = -B[14][21] + B[15][22];
    D[3][2][3] = -B[14][26] + B[15][27];
    D[3][3][3] = -B[14][32] + B[15][33];
    // w^4
    D[0][0][4] = B[11][16];
    D[0][1][4] = -B[10][20] + B[11][21];
    D[0][2][4] = -B[10][25] + B[11][26];
    D[0][3][4] = -B[10][31] + B[11][32];
    D[1][0][4] = B[13][16];
    D[1][1][4] = -B[12][20] + B[13][21];
    D[1][2][4] = -B[12][25] + B[13][26];
    D[1][3][4] = -B[12][31] + B[13][32];
    D[2][0][4] = B[14][16];
    D[2][1][4] = -B[13][20] + B[14][21];
    D[2][2][4] = -B[13][25] + B[14][26];
    D[2][3][4] = -B[13][31] + B[14][32];
    D[3][0][4] = B[15][16];
    D[3][1][4] = -B[14][20] + B[15][21];
    D[3][2][4] = -B[14][25] + B[15][26];
    D[3][3][4] = -B[14][31] + B[15][32];
    // w^5
    D[0][0][5] = 0;
    D[0][1][5] = B[11][20];
    D[0][2][5] = B[11][25];
    D[0][3][5] = -B[10][30] + B[11][31];
    D[1][0][5] = 0;
    D[1][1][5] = B[13][20];
    D[1][2][5] = B[13][25];
    D[1][3][5] = -B[12][30] + B[13][31];
    D[2][0][5] = 0;
    D[2][1][5] = B[14][20];
    D[2][2][5] = B[14][25];
    D[2][3][5] = -B[13][30] + B[14][31];
    D[3][0][5] = 0;
    D[3][1][5] = B[15][20];
    D[3][2][5] = B[15][25];
    D[3][3][5] = -B[14][30] + B[15][31];
    // w^6
    D[0][0][6] = 0;
    D[0][1][6] = 0;
    D[0][2][6] = 0;
    D[0][3][6] = B[11][30];
    D[1][0][6] = 0;
    D[1][1][6] = 0;
    D[1][2][6] = 0;
    D[1][3][6] = B[13][30];
    D[2][0][6] = 0;
    D[2][1][6] = 0;
    D[2][2][6] = 0;
    D[2][3][6] = B[14][30];
    D[3][0][6] = 0;
    D[3][1][6] = 0;
    D[3][2][6] = 0;
    D[3][3][6] = B[15][30];

    det4x4();

} // end auxArrays::poly20()

// main function
// the output is the number of real solutions found
int solver4p2v (const double x[NVIEWS][SAMPLE], const double y[NVIEWS][SAMPLE],
        const double z[NVIEWS][SAMPLE], const double &ss,
        double q_buffer[MAXSOLS * 4], double t_buffer[MAXSOLS * 3])
{
    auxArrays S;
    const double s = sqrt(ss);
    const double b = sqrt(1 - ss);
    S.matrix16x36(x, y, z, ss, s);
    S.poly20();

    double w1[MAXSOLS];
    const int ns = realRoots(S.p, w1);

    Camera ce[MAXSOLS];
    for (int k = 0; k < ns; ++k)
    { // cycle over all solutions

        const int dd[4] = {4, 5, 5, 6};
        double w = w1[k];
        double D1[3][4];
        for (int j = 0; j < 4; ++j)
        {
            const int d1 = dd[j];
            for (int i = 0; i < 3; ++i)
            {
                D1[i][j] = S.D[i][j][d1];
                for (int d = d1 - 1; d >= 0; --d)
                    D1[i][j] = D1[i][j]*w + S.D[i][j][d];
            }
        }

        double q[1][4];
        nullQR<3, 4>(D1, q);
        double den = 1.0/q[0][3], u = q[0][1]*den, v = q[0][2]*den;
        const double fac = b/sqrt(pow(u, 2) + pow(v, 2) + pow(w, 2));
        u *= fac;
        v *= fac;
        w *= fac;

        // compute rotation matrix
        const double u2 = 2*u, v2 = 2*v, w2 = 2*w;
        const double uu2 = u*u2, vv2 = v*v2, ww2 = w*w2, ss2 = 2*ss;
        const double uv2 = u2*v, vw2 = v2*w, uw2 = u2*w, us2 = u2*s, vs2 = v2*s, ws2 = w2*s;

        ce[k].Rt[1][0] = uu2 + ss2 - 1;
        ce[k].Rt[1][1] = ws2 + uv2;
        ce[k].Rt[1][2] = uw2 - vs2;
        ce[k].Rt[1][3] = uv2 - ws2;
        ce[k].Rt[1][4] = vv2 + ss2 - 1;
        ce[k].Rt[1][5] = us2 + vw2;
        ce[k].Rt[1][6] = vs2 + uw2;
        ce[k].Rt[1][7] = vw2 - us2;
        ce[k].Rt[1][8] = ww2 + ss2 - 1;

        // compute translation vector t
        double S[2][3], t[1][3];
        const double t1 = ce[k].Rt[1][6]*x[0][0] + ce[k].Rt[1][7]*y[0][0] + ce[k].Rt[1][8]*z[0][0];
        const double t2 = ce[k].Rt[1][3]*x[0][0] + ce[k].Rt[1][4]*y[0][0] + ce[k].Rt[1][5]*z[0][0];
        const double t3 = ce[k].Rt[1][0]*x[0][0] + ce[k].Rt[1][1]*y[0][0] + ce[k].Rt[1][2]*z[0][0];
        const double t4 = ce[k].Rt[1][6]*x[0][1] + ce[k].Rt[1][7]*y[0][1] + ce[k].Rt[1][8]*z[0][1];
        const double t5 = ce[k].Rt[1][3]*x[0][1] + ce[k].Rt[1][4]*y[0][1] + ce[k].Rt[1][5]*z[0][1];
        const double t6 = ce[k].Rt[1][0]*x[0][1] + ce[k].Rt[1][1]*y[0][1] + ce[k].Rt[1][2]*z[0][1];
        S[0][0] = t2*z[1][0] - t1*y[1][0];
        S[0][1] = t1*x[1][0] - t3*z[1][0];
        S[0][2] = t3*y[1][0] - t2*x[1][0];
        S[1][0] = t5*z[1][1] - t4*y[1][1];
        S[1][1] = t4*x[1][1] - t6*z[1][1];
        S[1][2] = t6*y[1][1] - t5*x[1][1];
        nullQR<2, 3>(S, t);

        // normalize translation vectors so that ||t2|| = 1
        const double n = sqrt(pow(t[0][0], 2) + pow(t[0][1], 2) + pow(t[0][2], 2));

                q_buffer[k * 4 + 0] = s;
                q_buffer[k * 4 + 1] = u;
                q_buffer[k * 4 + 2] = v;
                q_buffer[k * 4 + 3] = w;

                t_buffer[k * 3 + 0] = t[0][0] / n;
                t_buffer[k * 3 + 1] = t[0][1] / n;
                t_buffer[k * 3 + 2] = t[0][2] / n;


    } // end of cycle over all solutions

    return ns;

} // end solver4p2v()

namespace cv
{
class PC4PRAEstimatorCallback CV_FINAL : public PointSetRegistrator::Callback
{
protected:
    double angle_;

    void complementSolutions(auxArrays const& aux,
            const double x[NVIEWS][SAMPLE], const double y[NVIEWS][SAMPLE],
            const double z[NVIEWS][SAMPLE], double w, double s,
            Vec3d& rvec, Vec3d& tvec) const
    {
        Mat1d D1(3, 4);
        const int dd[4] = {4, 5, 5, 6};
        for (int j = 0; j < 4; ++j)
        {
            const int d1 = dd[j];
            for (int i = 0; i < 3; ++i)
            {
                D1[i][j] = aux.D[i][j][d1];
                for (int d = d1 - 1; d >= 0; --d)
                    D1[i][j] = D1[i][j] * w + aux.D[i][j][d];
            }
        }

        double ss = s * s;
        Vec4d q;
        SVD::solveZ(D1, q);
        double u = q[1] / q[3], v = q[2] / q[3];
        double fac = std::sqrt((1.0 - ss) / (u*u + v*v + w*w));
        u *= fac; v *= fac; w *= fac;

	// compute rotation matrix
        // FIXME(li): Evgeniy's 4p2v code seems using transposed
        // quaternion<->rotation matrix representation instead of the
        // wikipedia convention.
        // https://math.stackexchange.com/questions/383754/are-there-different-conventions-for-representing-rotations-as-quaternions.
	const double u2 = 2*u, v2 = 2*v, w2 = 2*w;
	const double uu2 = u*u2, vv2 = v*v2, ww2 = w*w2, ss2 = 2*ss;
	const double uv2 = u2*v, vw2 = v2*w, uw2 = u2*w, us2 = u2*s, vs2 = v2*s, ws2 = w2*s;

        double R[9];
	R[0] = uu2 + ss2 - 1;   R[1] = ws2 + uv2;       R[2] = uw2 - vs2;
	R[3] = uv2 - ws2;       R[4] = vv2 + ss2 - 1;   R[5] = us2 + vw2;
	R[6] = vs2 + uw2;       R[7] = vw2 - us2;       R[8] = ww2 + ss2 - 1;
	const double t1 = R[6]*x[0][0] + R[7]*y[0][0] + R[8]*z[0][0];
	const double t2 = R[3]*x[0][0] + R[4]*y[0][0] + R[5]*z[0][0];
	const double t3 = R[0]*x[0][0] + R[1]*y[0][0] + R[2]*z[0][0];
	const double t4 = R[6]*x[0][1] + R[7]*y[0][1] + R[8]*z[0][1];
	const double t5 = R[3]*x[0][1] + R[4]*y[0][1] + R[5]*z[0][1];
	const double t6 = R[0]*x[0][1] + R[1]*y[0][1] + R[2]*z[0][1];
        Mat1d S(2, 3);
        Vec3d t;
	S[0][0] = t2*z[1][0] - t1*y[1][0];
	S[0][1] = t1*x[1][0] - t3*z[1][0];
	S[0][2] = t3*y[1][0] - t2*x[1][0];
	S[1][0] = t5*z[1][1] - t4*y[1][1];
	S[1][1] = t4*x[1][1] - t6*z[1][1];
	S[1][2] = t6*y[1][1] - t5*x[1][1];

        rvec = {u, v, w};
        rvec *= angle_ / std::sqrt(1.0 - ss);
        // FIXME(li): Evgeniy's 4p2v code seems using transposed
        // quaternion<->rotation matrix representation instead of the
        // wikipedia convention.
        // https://math.stackexchange.com/questions/383754/are-there-different-conventions-for-representing-rotations-as-quaternions.
        rvec *= -1;

        SVD::solveZ(S, tvec);
    }

public:
    PC4PRAEstimatorCallback(double angle)
        : angle_(angle) {}

    int runKernel( InputArray _m1, InputArray _m2, OutputArray _model ) const CV_OVERRIDE
    {
        Mat_<Point2d> q1 = _m1.getMat(), q2 = _m2.getMat();
        CV_Assert(q1.cols == 1 && q2.cols == 1);

        double x[NVIEWS][SAMPLE], y[NVIEWS][SAMPLE], z[NVIEWS][SAMPLE];
        for (int si = 0; si < SAMPLE; ++si)
        {
            x[0][si] = q1(si, 0).x;
            y[0][si] = q1(si, 0).y;
            z[0][si] = 1;
            x[1][si] = q2(si, 0).x;
            y[1][si] = q2(si, 0).y;
            z[1][si] = 1;
        }

        auxArrays aux;
        const double s = std::cos(angle_ / 2);
        const double ss = s * s;
        aux.matrix16x36(x, y, z, ss, s);
        aux.poly20();

        Mat1d coeffs(1, 21, aux.p);
        // Cheating modules/core/src/matrix_wrap.cpp:1295
        Mat2d roots(0, 0);
        cv::solvePoly(coeffs, roots);
        int num_roots = roots.total();

        Mat1d model;
        for (auto const& root: roots)
        {
            if (std::abs(root[1]) > 1e-10) continue;

            Vec3d rvec, tvec;
            complementSolutions(aux, x, y, z, root[0], s, rvec, tvec);

            model.push_back(rvec);
            model.push_back(tvec);
        }
        _model.assign(model);

        return model.rows / 2;
    }

    void computeError( InputArray _m1, InputArray _m2, InputArray _model, OutputArray _err ) const CV_OVERRIDE
    {
        Mat X1 = _m1.getMat(), X2 = _m2.getMat(), model = _model.getMat();
        const Point2d* x1ptr = X1.ptr<Point2d>();
        const Point2d* x2ptr = X2.ptr<Point2d>();
        int n = X1.checkVector(2);
        Matx33d E(model.ptr<double>());

        _err.create(n, 1, CV_32F);
        Mat err = _err.getMat();

        for (int i = 0; i < n; i++)
        {
            Vec3d x1(x1ptr[i].x, x1ptr[i].y, 1.);
            Vec3d x2(x2ptr[i].x, x2ptr[i].y, 1.);
            Vec3d Ex1 = E * x1;
            Vec3d Etx2 = E.t() * x2;
            double x2tEx1 = x2.dot(Ex1);

            double a = Ex1[0] * Ex1[0];
            double b = Ex1[1] * Ex1[1];
            double c = Etx2[0] * Etx2[0];
            double d = Etx2[1] * Etx2[1];

            err.at<float>(i) = (float)(x2tEx1 * x2tEx1 / (a + b + c + d));
        }
    }
};

void estimateRelativePose_PC4PRA(double angle,
        InputArray _points1, InputArray _points2,
        InputArray _cameraMatrix, int method, double prob, double threshold,
        OutputArray _rvecs, OutputArray _tvecs, OutputArray _mask)
{
    // CV_INSTRUMENT_REGION();

    Mat points1, points2, cameraMatrix;
    _points1.getMat().convertTo(points1, CV_64F);
    _points2.getMat().convertTo(points2, CV_64F);
    _cameraMatrix.getMat().convertTo(cameraMatrix, CV_64F);

    int npoints = points1.checkVector(2);
    CV_Assert( npoints >= 0 && points2.checkVector(2) == npoints &&
                              points1.type() == points2.type());

    CV_Assert(cameraMatrix.rows == 3 && cameraMatrix.cols == 3 && cameraMatrix.channels() == 1);

    if (points1.channels() > 1)
    {
        points1 = points1.reshape(1, npoints);
        points2 = points2.reshape(1, npoints);
    }

    double fx = cameraMatrix.at<double>(0,0);
    double fy = cameraMatrix.at<double>(1,1);
    double cx = cameraMatrix.at<double>(0,2);
    double cy = cameraMatrix.at<double>(1,2);

    points1.col(0) = (points1.col(0) - cx) / fx;
    points2.col(0) = (points2.col(0) - cx) / fx;
    points1.col(1) = (points1.col(1) - cy) / fy;
    points2.col(1) = (points2.col(1) - cy) / fy;

    // Reshape data to fit opencv ransac function
    points1 = points1.reshape(2, npoints);
    points2 = points2.reshape(2, npoints);

    threshold /= (fx+fy)/2;

    Mat models;
    if( method == RANSAC )
        createRANSACPointSetRegistrator(
                makePtr<PC4PRAEstimatorCallback>(angle), 4, threshold, prob)->run(
                points1, points2, models, _mask);
    else
        createLMeDSPointSetRegistrator(
                makePtr<PC4PRAEstimatorCallback>(angle), 4, prob)->run(
                points1, points2, models, _mask);

    Mat1d rvecs, tvecs;
    for (int i = 0; i < models.rows; i += 2)
    {
        rvecs.push_back(models.row(i) * 1.0);
        tvecs.push_back(models.row(i + 1) * 1.0);
    }
    _rvecs.assign(rvecs);
    _tvecs.assign(tvecs);
}
}
